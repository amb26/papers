* The term “co-occurrence” seems to be used to represent at least two distinct aspects of the system: 1) a description of the conditions necessary for a thing to be produced, and 2) the thing itself that gets produced. For example, in the abstract it is written: “Co-occurrence, the prerequisite conditions for an interaction to take place”. Later, in 4.1, you have “First, a specific combination of conditions, which we call co-occurrence, must occur.” This is confusing because it suggests that a “co-occurrence” is something that “occurs”, rather than “the prerequisite conditions” for something that occurs. However, in 4.3, “co-occurrence” is described both as a “signal”, and as a thing that the signal refers to: “The form of co- occurrence is a signal (labelled 3 in Figure 1) containing refer- ences to the co-occurring elements, which is emitted while the co-occurrence is ongoing.” 4.1, 4.4, and Figure 1 all make it clear that there is a thing called a co-occurrence signal that is distinct from the co-occurrences themselves, but the last paragraph of 4.3 is potentially confusing.

* I think the first paragraph in 4.5.1 could use a small clarification. If I understand correctly, two problems are being described: 1) too many co-occurrences are being detected, and 2) too many detected co-occurrences are being “transmitted”, which I take to mean “encoded in the co-occurrence signal or  co-occurrence document”. It seems like in order to build the menu in the example, all co-occurrences must be detected, and that the user’s choices will reflect which of those get encoded in the co-occurrence signal, otherwise, if the menu was generated incompletely, the user wouldn’t be able to select the missing co-occurrences for encoding. But if that’s the case, then the example can’t be a solution to that particular problem since all co-occurrences must still be presented to the user. Or maybe I’m misunderstanding…

* “Similarly, two objects may continue to interact after the co-occurrence has ceased to exist, as when continuing to drag a slider even when the cursor moves away from the trough.” This example might warrant more discussion. I think perhaps clarifying the second paragraph of 4.3.1 could help—it says “In a straightforward implementation which has good authorial values, we can then cast the work of the entanglement instantia- tor as a pure function of the co-occurrence signal, which maps detected co-occurrences into entanglements for as long as they last, and subsequently maps them back into non-existence.” I think it’s just a matter clarifying what “they” and “them” are in “for as long as they last” and “maps them back”. If “they” and “them” are co-occurrences, then I think the example in 5.2 can’t really work because it suggests that the mapping  is broken when co-occurrences cease to exist. However, if it’s read the other way, that the entanglement instantiator does its mapping only so long as the entanglement exists, then it sounds like there’s something that needs to be accounted for that determines the end of the entanglement, which would have to be considered an additional input to the entanglement instantiator function if that function is to be considered pure.

* I have a little bit of trouble with the linearity of Figure 1 and the notion of “more state of the world”, but maybe it’s ok. It seems like everything contributes to the state of the world, but that’s not what’s represented here. For example, it seems like the co-occurrence signal needs to be a thing in the world, but as it is, it looks like something that’s produced by the co-occurrence engine and has no representation in the state of the world except indirectly through its interactions with other machines. I know that the numbers in the boxes are meant to represent externalization, but it’s not exactly clear that externalization affects the state of the world.

* In general, I’m not sure if “co-occurrence” is the right word or not. It may just be a matter of clarification, but I find something difficult to reconcile about it. Here’s an example of the kind of thing that gets me hung up: let’s say I have a cursor hovering over a box, but there is no rule anywhere in the system that interprets that as a meaningful situation for any machine to act upon. Now let’s say I have a rule that says that when I press the letter ‘k’, add a rule that the co-occurrence engine will use to recognize that cursors that are hovering over boxes should become entangled. In this case, it’s tough to discuss the cursor and the box before and after the key press in relation to something called “co-occurrence”. They were already there together, you might say co-occurring. What was brought into existence was the rule that affected the co-occurrence engine, and that rule can be said to be co-occurring with the cursor and box, /and all other stuff in the world/. But I have a hard time with the notion that a thing (the rule) can cause other things that were not in a state of co-occurrence to suddenly, through no change in their state, become in a state of co-occurrence. It seems to me that the thing that the co-occurrence engine produces is produced through the co-occurrence of the rule in the document and things that the rule refers to, rather than just the things like the cursor and box, but the language of section 4.3 obscures that.