\documentclass{ppig}
\usepackage{epsfig}
\usepackage{booktabs}
\usepackage{ucs}
\usepackage{enumitem}
\setlist[1]{itemsep=-5pt,topsep=-5pt}
\usepackage[utf8x]{inputenc}

% The titlebox defines how much vertical space is given for
% the authors' list. If you need extra space to show all the
% authors, uncomment the line below and increase the value. Please
% do not make the titlebox smaller than the original size of 5cm.
%\setlength\titlebox{5cm}

\title{Senses of Craft in Computer Science}

% List the authors like you would in a table.
% The \And command creates another author's column. Use it after the
% details of one author to separate them from the following author horizontally.
% The \AND command creates a new "row" of authors and it should be used
% when the authors don't fit on the same line. You may have to increase
% the titlebox so that the author's don't overlap with the abstract.
\author{Antranig Basman \\
  amb26@ponder.org.uk \\
}

\date{}

\begin{document}
\maketitle
\thispagestyle{empty}

\begin{abstract}
Computer Science, yet to establish its role in the world, inhabits an invidious position between mathematics, engineering and craft --- losing out by the comparison to each. We draw a distinction between different levels at which the term `craft' could be applied
and list four key virtues desirable for crafted items at a higher level. The current products of computer scientists or software engineers are deficient in these four virtues, but not necessarily so --- we see no inherent limitations that require future incarnations of our field to be forever without them. We propose a shift in the value system underlying our work --- away from correctness, towards truthfulness, rewarding the workmanship of risk, rather than certainty, and considering time horizons of generations rather than at most a couple of years.
\end{abstract}


\section{Introduction}

Computer Science, yet to establish its role in the world, inhabits an invidious position between mathematics, engineering and craft - losing out by the comparison to each. A recent line of discourse \cite{Lindell2014, Blackwell2015} considers that software development constitutes a form of craft. 

We argue that the craft status of software development remains limited, in the crucial senses which mark the phenomenon and results of craft as highly desirable to society. In a looser sense, software development shares some of the aspects of a craft --- in the same way that a DIY enthusiast, journeying to their local hardware store in search of cheap, highly standardised components with poor manufacturing values can be said to be indulging in a craft as they seek to make some more or less successful home improvements. But these are not the values we hope to appeal to as we seek to ennoble our “craft” by comparison with its more established brethren.

\section{Virtues of Craft}

As William Morris remarked as he began to establish the English Arts and Crafts movement in 1880, “Have nothing in your houses that you do not know to be useful, or believe to be beautiful” \cite{Morris1880}. A true craft produces artefacts that are

\begin{description}
\item[Beautiful] - giving pleasure in use and contemplation
\item[Durable] - long-lived, stable, and if degrading, degrading gracefully
\item[Ownable] - can be the possession of their owner, living amongst them in their household
\item[Handleable] - fulfil a function which is immediately obvious to sight and touch
\end{description}

In contrast, the outputs of computer science are widely acknowledged to be ugly, brittle, masterful and obtuse.

Let us consider our virtues in turn.

\subsection{Beauty}

There is an aesthetics in computer science, but it is not for the user or rarely even for the developer. Any model for beauty with any currency is imported wholesale from mathematics --- an algorithm can be elegant, a proof beautiful. In contrast, any actual piece of software, especially one which performs a useful function, is without fail fantastically ugly, reflecting the haphazard and throwaway values of real software culture. As Simon Peyton-Jones remarked at the PPIG keynote of 2015, of open source - “It’s where people go to contribute, but it’s not beautiful”. \cite{Perlis1979} have recognised that ``Formal verification of programs, no matter how obtained, will not play the same role in the
development of computer science and software engineering as proofs do in mathematics.''

\subsection{Durability}

The lack of beauty in actual software is intimately tied up in the lack of possibility for any kind of durable expression --- and still less, of any durable function. It is well-known that software will spontaneously ``rot'' as a result of a progressive violation of its environmental assumptions. Sadly, it does not rot gracefully in the manner of a forest log, but disgracefully in the form of simply failing to install or run correctly or indeed at all. The only hope one has for running an old piece of software is to create a complete replica of its original home (a “virtual machine”) correct in every detail, and keep it captive there. If software were a lifeform, it would be an impossibly brittle and ill-adapted one that would mark in every case an evolutionary dead-end.

Unfortunately, our field does not so far have the courage to face up to this problem. Indeed, one of its leading lights, Alan Perlis, in \cite{Abelson1985} speculated whether software might not inherently lack durability, comparing it to a “soap bubble”. We can't infer from Perlis' remark whether he believed software should lack durability or simply that we lack the understanding to make it so. We suspect the latter --- and if most software didn’t possess the beauty of a junkpile or shantytown rather than a soap bubble, we would be more sympathetic to its lack of durability.

\subsection{Ownability}

Because it is not durable, but also through further causes, software can never effectively be owned by its user. Software is less ownable now than it has ever been --- with the prevalence of “leasing” models for software, and increasingly aggressively pushed “updates” which will sometimes interrupt vital human activities in order to deprive them temporarily or permanently of the use of the artefact that they just believed was theirs \cite{Huffington2016}. This is not the behaviour of a tool or a product, but of a tin-pot aristocrat transplanted into the user’s home.

\subsection{Handleability}

Software is legendarily opaque in form and function. It is well-attested that the vast majority of users are unaware of or unable to exploit the majority of configuration or function which is in theory available to them \cite{Spool2011}. The output of a craftsman, whether it takes the form of a spoon, bowl, basket or chair, even if it is of an unfamiliar form, typically appeals to an immediately obvious use value. Part of the problem could be ascribed to the novelty of software function, but users have little incentive to invest effort in becoming familiar with their software, because of our previous point --- they have no control over its form or any ability to resist change. At any moment the familiar may once again be swept away by the unfamiliar.

\section{Our Lack of Materials}
Some of the discourse around software “craft” centres on the property of its “material”. We argue that the core of the deficiencies of software can be ascribed to the lack of anything which properly qualifies as its material. A true material is the result of a natural process, accumulated and shaped for years if not millenia. When one applies craft to a natural material, one is engaging with the natural accident of this process when meeting difficulties of resistance. By contrast, when meeting resistance in crafting software, one is primarily tangling with the obtuseness of one’s colleagues and their insistence in retaining authorial power for themselves.

Before software could become a craft, we need to construct its material. The durability of a true material, as well as enjoying the sheer ability of continued survival, also has the aspect of the ability to participate in creative networks. A product made of a material can be passed from hand to hand, at each point being seen in a different role or being the starting point of a fresh creative cycle.
%Refer to other PPIG paper here

\section{Workmanship leading to Craftsmanship}

\cite{Pye1968} makes a crucial distinction between grades of workmanship --- the ``workmanship of risk'', where the outcome is at risk at every stage, and under the direct control of the worker, and the ``workmanship of certainty'' where variability has been eliminated through a mechanical process. Pye is clear that only the former kind of workmanship can lead to true craft, whereas computer science exclusively values the latter --- in its use of proofs, abstractions, implementation insulation, and other techniques designed to take power away from the user. Pye is also clear to value the contributions of engineers, who alone are responsible for defining the nature of materials which lead to real results, as opposed to theoreticians and scientists who accept such materials as a {\it fait accompli} without assigning or recognising credit. \cite{Gabriel2012} is also clear to point out that it is most often the case that principled engineering work long precedes formalisation.

\cite{Lakatos1976} on certainty:
\begin{quote}
“Certainty” is far from being a sign of success, it is only a symptom of lack of imagination, of conceptual poverty. It produces smug satisfaction and prevents the growth of knowledge.
\end{quote}

%%\section{Truthfulness rather than Correctness}

%%A Computer Scientist will frequently seek to prove that a design is ``correct'' --- usually by recourse to some type-theoretic argument. Such an argument could only ever be mustered with respect to a description of the system which is unintelligible to the general public. By contrast, Morris promotes instead the values of {\it truthfulness}, rather than correctness --- a design could only be considered more or less truthful with respect to the nature of its raw materials. But since we have so far no durable or malleable materials, such a notion of truthfulness will continue to elude us.

\section{Lutyens’ Latch}
As an example of the kind of craft we are appealing to, we exhibit the example of this door latch (Figure \ref{fig:Latch}) designed by Edwin Lutyens, a prime proponent of the Arts and Crafts movement. Latches like these can be found throughout his restoration of Lindisfarne Castle which he undertook starting in 1902, as well as some of his other designs. It self-evidently enjoys all the virtues we have listed --- it is highly beautiful (even achieving a kind of wittiness), and its method of construction, based on readily available and widely understood materials, is a direct guide to its function. In the unlikely event that it requires maintenance (having endured intact for over a century), this can be achieved through widespread means.

A lack of durable and natural materials, as well as a suitable craft culture, represent the primary deficits in computer science which prevent it from constructing crafted items such as these.

\begin{figure*}[htb!]
\centering%
\includegraphics[width=2in]{IMG_9811-lut-latch.jpg}
\caption{Door latch designed by Edwin Lutyens}
\label{fig:Latch}
\end{figure*}

\section{Spectrum of Forgiveness}

Whilst the software that we have is constituted of a material far more brittle and less malleable than the least forgiving of the human crafts (for example, ceramics), being a product of the mind, it has the potential to be far superior to the most forgiving (for example, knitted textiles). The following table illustrates the affordances that we can expect from different materials.

{\bf Ceramics}
\begin{itemize}
\item Once the product’s form is fixed, it cannot be further altered in a graceful way.
\item It is brittle and once damaged cannot be gracefully repaired (a glued repair is always obvious, and a damaged surface can never be reformed like the original)
\end{itemize}

{\bf Wood}
\begin{itemize}
\item With some effort, an item can be reformed or repaired, for example by sanding, varnishing, repolishing etc.
\item For some items, a broken element can be removed (unglued, unscrewed) and replaced with a new part which functions and appears as well as the original
\end{itemize}

{\bf Textiles}
\begin{itemize}
\item Most items can be repaired, sometimes indefinitely, by patching or darning
\item In some cases the original raw materials can be fully recovered by unravelling the garment and a completely fresh one constructed
\end{itemize}


In contrast, we have

{\bf Computer Science of the Present}:
\begin{itemize}
\item A product may spontaneously disintegrate without warning, suddenly becoming wholly unusable
\item No modifications may be made by the owner after delivery of the software, even through amateurish affordances such as superglue
\item The raw materials for software are endlessly distant from the owner, separated by a series of barriers operated by successive priesthoods (compilers, linkers, integrators, hosting services)
\end{itemize}

Whereas nothing inherent in Computer Science prevents it from being

{\bf Computer Science of the Future}:

\begin{itemize}
\item Any product, either in form, function, or both, may be preserved indefinitely in a working condition
\item Any owner of software may modify and maintain it using only the affordances to hand --- or else share or receive such modified versions from peers or communities of interest
\item The raw materials for software are constantly immanent --- any user of software, simply through an act of perception, may choose to see it either as raw materials, finished product, or anything in between
\end{itemize}

From its current position as the world’s least forgiving craft, computer science could surpass all those currently known.

\section{Resolution}

Our field is making only tiny and halting steps towards craftsmanship. It is increasingly popular to show relevance to craftspeople by an appeal to our ability to work in their spaces or with their materials (see \cite{Victor2014} or other “Maker” movements), but the only result will be to export our own aesthetics of frustration and power-worship into already functional communities. The experience of \cite{Blackwell2014} exhibits the behaviour of craftspeople when provided with pieces of “techno-junk” such as a USB keyboard which doesn’t work with a USB socket and other similar obstructions:
\begin{quote}
{\it experiences were \ldots  ``frustrating'' --- a word that was used consistently and repeatedly in the artists’ reports} \\
\hspace*{-20pt}with the result that \\
{\it busy artists
are equally likely to respond to obstacles by shifting their effort to other projects in which they are making rapid progress}
\end{quote}

Computer scientists show little recognition of the frustration that their products cause in practice, and instead imagine that the world would be a better place if more people thought and worked like them --- witness the rise of “Computational Thinking” \cite{Wing2008} as the vehicle for this imperialism. Rather than the virtues we list above, the highest virtues of computer science are the tedious accountancy of efficiency and correctness. These will create a civilisation of bureaucrats rather than craftspeople.

In some quarters, there are signs of a change of heart. \cite{Blackwell2008} turn against the tide of computational thinking towards a respect for the individual human, and \cite{Blackwell2005} admit the possibility that ``an end-user programmer may well prefer to accept the results of an imperfect execution'' --- an appeal to the ``workmanship of risk''. 

However, there are few concrete signs of the development of the durable yet forgiving materials that must underlie true crafts. There are some simple, house-clearing tasks that we should turn our resources to, before we are prepared to achieve the higher virtues:

\begin{itemize}
\item To guarantee to every user that, once given an artefact, they can always choose to use it in its current form, regardless of “improvements”, updates, or environmental changes
\item For every piece of software to be worked on by means of itself, rather than through the use of specialised tools only available to an elite at a different site, at a different point in its history
\item Given a user's preferred way of working and seeing, for any system that they start to work with, it adapt to whatever extent it can to meet those preferences
\end{itemize}

The latter three of our virtues are something that can be worked on in our lifetimes --- and if we succeed in constructing better, more forgiving materials, our descendants might possibly use them to construct something which is beautiful.


\bibliography{refs}
\bibliographystyle{apacite} 
\end{document}
